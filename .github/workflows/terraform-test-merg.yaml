name: 'Deploy application in either dev and production environments'

on:
  # Trigger the workflow for pull requests
  pull_request:
    types: [opened, edited, reopened, synchronize]

  # Trigger the workflow for pushes to the "main" branch
  push:
    branches:
      - 'main'

permissions:
  contents: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Set environment dynamically based on the branch
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    env:
      # Specify Terraform version to use
      TERRAFORM_VERSION: 1.3.9  # Use Terraform v1.3.9
      # Set the working directory based on the branch
      WORK_DIR: ${{ github.ref == 'refs/heads/main' && './environments/production' || './environments/test' }}

      # AWS credentials are configured via secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: eu-west-2

    # Define shell settings for the workflow
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to get the latest code
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Set up Terraform with the specified version
    - name: Set up Terraform version
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Initialize the Terraform configuration (initialize working directory)
    - name: Initialize Terraform
      run: terraform init
      working-directory: ${{ env.WORK_DIR }}

    # Generate a Terraform execution plan to see what changes will be made
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{ env.WORK_DIR }}

    # Apply the Terraform execution plan to create the infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ${{ env.WORK_DIR }}

    # Test the application by invoking the API Gateway endpoint
    - name: Test API Gateway
      run: |
        API_GATEWAY_URL=$(terraform output -raw api_gateway_endpoint)
        RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "$API_GATEWAY_URL")
        echo "API_GATEWAY_URL: $API_GATEWAY_URL"
        echo "HTTP Status Code: $RESPONSE"
      working-directory: ${{ env.WORK_DIR }}

    # Destroy the Terraform-managed infrastructure if not on 'main' branch
    - name: Terraform Destroy
      if: always() && github.ref != 'refs/heads/main'  # Run regardless of other steps' outcomes, but only for non-main branches
      run: terraform destroy -auto-approve -input=false
      working-directory: ${{ env.WORK_DIR }}
